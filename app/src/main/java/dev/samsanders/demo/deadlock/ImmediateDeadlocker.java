/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.samsanders.demo.deadlock;

import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ImmediateDeadlocker {

    private static final ExecutorService threadPool = Executors.newFixedThreadPool(2);
    private static final String SHARED_RESOURCE_1 = "shared-resource-1";
    private static final String SHARED_RESOURCE_2 = "shared-resource-2";

    public static void main(String[] args) {
        threadPool.submit(new Competitor1());
        threadPool.submit(new Competitor2());
    }

    private static void doSomeWork() {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static class Competitor1 implements Runnable {

        @Override
        public void run() {
            while (true) {
                String currentThread = Thread.currentThread().getName();

                synchronized (SHARED_RESOURCE_1) {
                    System.out.printf("Thread %s acquired lock on SHARED_RESOURCE_1%n", currentThread);
                    doSomeWork();

                    synchronized (SHARED_RESOURCE_2) {
                        System.out.printf("Thread %s acquired lock on SHARED_RESOURCE_2%n", currentThread);
                        doSomeWork();

                    }
                    System.out.printf("Thread %s released lock on SHARED_RESOURCE_2%n", currentThread);

                }
                System.out.printf("Thread %s released lock on SHARED_RESOURCE_1%n", currentThread);
            }
        }
    }

    private static class Competitor2 implements Runnable {

        @Override
        public void run() {
            while (true) {
                String currentThread = Thread.currentThread().getName();

                synchronized (SHARED_RESOURCE_2) {
                    System.out.printf("Thread %s acquired lock on SHARED_RESOURCE_2%n", currentThread);
                    doSomeWork();

                    synchronized (SHARED_RESOURCE_1) {
                        System.out.printf("Thread %s acquired lock on SHARED_RESOURCE_1%n", currentThread);
                        doSomeWork();

                    }
                    System.out.printf("Thread %s released lock on SHARED_RESOURCE_1%n", currentThread);

                }
                System.out.printf("Thread %s released lock on SHARED_RESOURCE_2%n", currentThread);
            }
        }
    }
}
